#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let secureApp = require('../app');
let debug = require('debug')('project:server');
let http = require('http');
let https = require('https');
let fs = require('fs');
require('dotenv').config({path: '/home/ubuntu/.env'});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
secureApp.set('port', 443);

/**
 * Create HTTP server.
 */

var options = {
  key: fs.readFileSync(`${__dirname}/localhost.key`),
  cert: fs.readFileSync(`${__dirname}/localhost.cert`),
  requestCert: true,
  rejectUnauthorized: false
};

var server = http.createServer(app);
var secureServer = https.createServer(options, secureApp);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

secureServer.listen(443);
secureServer.on('error', onError);
secureServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  global.logger('Listening on ' + bind);
}


process.on('SIGTERM', shutDown);
process.on('SIGINT', shutDown);


function shutDown() {
  global.logger('Received kill signal, shutting down gracefully');
  server.close(() => {
    global.logger('Closed out remaining connections');
    process.exit(0);
  });

  setTimeout(() => {
    console.error('Could not close connections in time, forcefully shutting down');
    process.exit(1);
  }, 5000);
}
